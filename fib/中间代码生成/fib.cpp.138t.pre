
;; Function __static_initialization_and_destruction_0.constprop (_Z41__static_initialization_and_destruction_0ii.constprop.0, funcdef_no=2280, decl_uid=49874, cgraph_uid=1024, symbol_order=1202) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZStL8__ioinit = NONLOCAL
ESCAPED = &_ZStL8__ioinit
ESCAPED = &_ZNSt8ios_base4InitD1Ev
ESCAPED = &_ZStL8__ioinit
__dso_handle = NONLOCAL
ESCAPED = &__dso_handle

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 8 9 10 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*_ZStL8__ioinit";
"*_ZNSt8ios_base4InitD1Ev";
"*__dso_handle";
"*_ZNSt8ios_base4InitC1Ev";
"*__cxa_atexit";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "__dso_handle";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";

  // Edges in the constraint graph:
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "__dso_handle";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZStL8__ioinit";
"STOREDANYTHING" -> "_ZNSt8ios_base4InitD1Ev";
"STOREDANYTHING" -> "__dso_handle";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_ZStL8__ioinit";
"_ZNSt8ios_base4InitD1Ev";
"__dso_handle";
"_ZNSt8ios_base4InitC1Ev";
"__cxa_atexit";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"NONLOCAL" -> "_ZStL8__ioinit";
"NONLOCAL" -> "_ZNSt8ios_base4InitD1Ev";
"NONLOCAL" -> "__dso_handle";
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZStL8__ioinit";
"STOREDANYTHING" -> "_ZNSt8ios_base4InitD1Ev";
"STOREDANYTHING" -> "__dso_handle";
"_ZStL8__ioinit" -> "ESCAPED";
"_ZNSt8ios_base4InitD1Ev" -> "ESCAPED";
"__dso_handle" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL _ZStL8__ioinit _ZNSt8ios_base4InitD1Ev __dso_handle }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZStL8__ioinit = { ESCAPED NONLOCAL }
_ZNSt8ios_base4InitD1Ev = { ESCAPED NONLOCAL }
__dso_handle = { ESCAPED NONLOCAL }
_ZNSt8ios_base4InitC1Ev = { }
__cxa_atexit = { }


Alias information for void __static_initialization_and_destruction_0(int, int)

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.44905 D.49811 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void __static_initialization_and_destruction_0.constprop ()
{
  int __initialize_p;
  int __priority;

  <bb 2> [local count: 1073741824]:
  std::ios_base::Init::Init (&__ioinit);
  __cxxabiv1::__cxa_atexit (__dt_comp , &__ioinit, &__dso_handle);
  return;

}



;; Function main (main, funcdef_no=1778, decl_uid=44906, cgraph_uid=512, symbol_order=542) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
_ZSt3cin.0+64 = NONLOCAL
_ZSt3cin.64+64 = NONLOCAL
_ZSt3cin.128+64 = NONLOCAL
_ZSt3cin.192+224 = NONLOCAL
_ZSt3cin.448+64 = NONLOCAL
_ZSt3cin.512+64 = NONLOCAL
_ZSt3cin.576+1120 = NONLOCAL
_ZSt3cin.1728+64 = NONLOCAL
_ZSt3cin.1792+64 = NONLOCAL
_ZSt3cin.1856+64 = NONLOCAL
_ZSt3cin.1920+16 = NONLOCAL
_ZSt3cin.1984+64 = NONLOCAL
_ZSt3cin.2048+64 = NONLOCAL
_ZSt3cin.2112+64 = NONLOCAL
_ZSt3cin.2176+64 = NONLOCAL
ESCAPED = &_ZSt3cin.0+64
ESCAPED = &n
_ZSt4cout.0+64 = NONLOCAL
_ZSt4cout.64+64 = NONLOCAL
_ZSt4cout.128+224 = NONLOCAL
_ZSt4cout.384+64 = NONLOCAL
_ZSt4cout.448+64 = NONLOCAL
_ZSt4cout.512+1120 = NONLOCAL
_ZSt4cout.1664+64 = NONLOCAL
_ZSt4cout.1728+64 = NONLOCAL
_ZSt4cout.1792+64 = NONLOCAL
_ZSt4cout.1856+16 = NONLOCAL
_ZSt4cout.1920+64 = NONLOCAL
_ZSt4cout.1984+64 = NONLOCAL
_ZSt4cout.2048+64 = NONLOCAL
_ZSt4cout.2112+64 = NONLOCAL
ESCAPED = &_ZSt4cout.0+64
ESCAPED = &NULL
_9 = NONLOCAL
ESCAPED = _9
ESCAPED = &_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
ESCAPED = &_ZSt4cout.0+64
ESCAPED = &NONLOCAL
_12 = NONLOCAL
ESCAPED = _12
ESCAPED = &_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
n.0_24 = n
a_25 = b_26
a_25 = &NULL
b_26 = b_15
b_26 = &NONLOCAL
i_27 = i_19
i_27 = &NONLOCAL
b_15 = a_25 + UNKNOWN
b_15 = b_26 + UNKNOWN
ESCAPED = &_ZSt4cout.0+64
ESCAPED = b_15
_17 = NONLOCAL
ESCAPED = _17
ESCAPED = &_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
i_19 = i_27 + UNKNOWN
i_19 = &NONLOCAL
n.0_1 = n

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 5 8 23 24 38 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_ZSt3cin.0+64";
"_ZSt3cin.64+64";
"_ZSt3cin.128+64";
"_ZSt3cin.192+224";
"_ZSt3cin.448+64";
"_ZSt3cin.512+64";
"_ZSt3cin.576+1120";
"_ZSt3cin.1728+64";
"_ZSt3cin.1792+64";
"_ZSt3cin.1856+64";
"_ZSt3cin.1920+16";
"_ZSt3cin.1984+64";
"_ZSt3cin.2048+64";
"_ZSt3cin.2112+64";
"_ZSt3cin.2176+64";
"n";
"_ZSt4cout.0+64";
"_ZSt4cout.64+64";
"_ZSt4cout.128+224";
"_ZSt4cout.384+64";
"_ZSt4cout.448+64";
"_ZSt4cout.512+1120";
"_ZSt4cout.1664+64";
"_ZSt4cout.1728+64";
"_ZSt4cout.1792+64";
"_ZSt4cout.1856+16";
"_ZSt4cout.1920+64";
"_ZSt4cout.1984+64";
"_ZSt4cout.2048+64";
"_ZSt4cout.2112+64";
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"_ZNSirsERi";
"_ZNSolsEi";
"_9";
"_ZNSolsEPFRSoS_E";
"_12";
"n.0_24";
"a_25"[label="a_25 = { 1 }"];
"b_26"[label="b_26 = { 5 }"];
"b_15";
"i_27"[label="i_27 = { 5 }"];
"i_19"[label="i_19 = { 5 }"];
"_17";
"n.0_1";
"main";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*_ZSt3cin.0+64";
"*_ZSt3cin.64+64";
"*_ZSt3cin.128+64";
"*_ZSt3cin.192+224";
"*_ZSt3cin.448+64";
"*_ZSt3cin.512+64";
"*_ZSt3cin.576+1120";
"*_ZSt3cin.1728+64";
"*_ZSt3cin.1792+64";
"*_ZSt3cin.1856+64";
"*_ZSt3cin.1920+16";
"*_ZSt3cin.1984+64";
"*_ZSt3cin.2048+64";
"*_ZSt3cin.2112+64";
"*_ZSt3cin.2176+64";
"*n";
"*_ZSt4cout.0+64";
"*_ZSt4cout.64+64";
"*_ZSt4cout.128+224";
"*_ZSt4cout.384+64";
"*_ZSt4cout.448+64";
"*_ZSt4cout.512+1120";
"*_ZSt4cout.1664+64";
"*_ZSt4cout.1728+64";
"*_ZSt4cout.1792+64";
"*_ZSt4cout.1856+16";
"*_ZSt4cout.1920+64";
"*_ZSt4cout.1984+64";
"*_ZSt4cout.2048+64";
"*_ZSt4cout.2112+64";
"*_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"*_ZNSirsERi";
"*_ZNSolsEi";
"*_ZNSolsEPFRSoS_E";
"*n.0_24";
"*a_25";
"*b_26";
"*b_15";
"*i_27";
"*i_19";
"*n.0_1";
"*main";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"_9" -> "ESCAPED";
"_12" -> "ESCAPED";
"b_15" -> "ESCAPED";
"_17" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "_ZSt3cin.0+64";
"NONLOCAL" -> "_ZSt3cin.64+64";
"NONLOCAL" -> "_ZSt3cin.128+64";
"NONLOCAL" -> "_ZSt3cin.192+224";
"NONLOCAL" -> "_ZSt3cin.448+64";
"NONLOCAL" -> "_ZSt3cin.512+64";
"NONLOCAL" -> "_ZSt3cin.576+1120";
"NONLOCAL" -> "_ZSt3cin.1728+64";
"NONLOCAL" -> "_ZSt3cin.1792+64";
"NONLOCAL" -> "_ZSt3cin.1856+64";
"NONLOCAL" -> "_ZSt3cin.1920+16";
"NONLOCAL" -> "_ZSt3cin.1984+64";
"NONLOCAL" -> "_ZSt3cin.2048+64";
"NONLOCAL" -> "_ZSt3cin.2112+64";
"NONLOCAL" -> "_ZSt3cin.2176+64";
"NONLOCAL" -> "_ZSt4cout.0+64";
"NONLOCAL" -> "_ZSt4cout.64+64";
"NONLOCAL" -> "_ZSt4cout.128+224";
"NONLOCAL" -> "_ZSt4cout.384+64";
"NONLOCAL" -> "_ZSt4cout.448+64";
"NONLOCAL" -> "_ZSt4cout.512+1120";
"NONLOCAL" -> "_ZSt4cout.1664+64";
"NONLOCAL" -> "_ZSt4cout.1728+64";
"NONLOCAL" -> "_ZSt4cout.1792+64";
"NONLOCAL" -> "_ZSt4cout.1856+16";
"NONLOCAL" -> "_ZSt4cout.1920+64";
"NONLOCAL" -> "_ZSt4cout.1984+64";
"NONLOCAL" -> "_ZSt4cout.2048+64";
"NONLOCAL" -> "_ZSt4cout.2112+64";
"NONLOCAL" -> "_9";
"NONLOCAL" -> "_12";
"n" -> "n.0_24";
"b_26" -> "a_25";
"b_15" -> "b_26";
"i_19" -> "i_27";
"NONLOCAL" -> "_17";
"n" -> "n.0_1";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"_ZSt3cin.0+64";
"_ZSt3cin.64+64";
"_ZSt3cin.128+64";
"_ZSt3cin.192+224";
"_ZSt3cin.448+64";
"_ZSt3cin.512+64";
"_ZSt3cin.576+1120";
"_ZSt3cin.1728+64";
"_ZSt3cin.1792+64";
"_ZSt3cin.1856+64";
"_ZSt3cin.1920+16";
"_ZSt3cin.1984+64";
"_ZSt3cin.2048+64";
"_ZSt3cin.2112+64";
"_ZSt3cin.2176+64";
"_ZSt4cout.0+64";
"_ZSt4cout.64+64";
"_ZSt4cout.128+224";
"_ZSt4cout.384+64";
"_ZSt4cout.448+64";
"_ZSt4cout.512+1120";
"_ZSt4cout.1664+64";
"_ZSt4cout.1728+64";
"_ZSt4cout.1792+64";
"_ZSt4cout.1856+16";
"_ZSt4cout.1920+64";
"_ZSt4cout.1984+64";
"_ZSt4cout.2048+64";
"_ZSt4cout.2112+64";
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"_ZNSirsERi";
"_ZNSolsEi";
"_9";
"_ZNSolsEPFRSoS_E";
"n.0_24";
"a_25" [label="\N\nb_15 = a_25 + UNKNOWN\l"];
"b_26" [label="\N\nb_15 = b_26 + UNKNOWN\l"];
"b_15";
"i_27" [label="\N\ni_27 = i_27 + UNKNOWN\l"];
"main";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZSt3cin.0+64";
"STOREDANYTHING" -> "_ZSt3cin.64+64";
"STOREDANYTHING" -> "_ZSt3cin.128+64";
"STOREDANYTHING" -> "_ZSt3cin.192+224";
"STOREDANYTHING" -> "_ZSt3cin.448+64";
"STOREDANYTHING" -> "_ZSt3cin.512+64";
"STOREDANYTHING" -> "_ZSt3cin.576+1120";
"STOREDANYTHING" -> "_ZSt3cin.1728+64";
"STOREDANYTHING" -> "_ZSt3cin.1792+64";
"STOREDANYTHING" -> "_ZSt3cin.1856+64";
"STOREDANYTHING" -> "_ZSt3cin.1920+16";
"STOREDANYTHING" -> "_ZSt3cin.1984+64";
"STOREDANYTHING" -> "_ZSt3cin.2048+64";
"STOREDANYTHING" -> "_ZSt3cin.2112+64";
"STOREDANYTHING" -> "_ZSt3cin.2176+64";
"STOREDANYTHING" -> "n.0_24";
"STOREDANYTHING" -> "_ZSt4cout.0+64";
"STOREDANYTHING" -> "_ZSt4cout.64+64";
"STOREDANYTHING" -> "_ZSt4cout.128+224";
"STOREDANYTHING" -> "_ZSt4cout.384+64";
"STOREDANYTHING" -> "_ZSt4cout.448+64";
"STOREDANYTHING" -> "_ZSt4cout.512+1120";
"STOREDANYTHING" -> "_ZSt4cout.1664+64";
"STOREDANYTHING" -> "_ZSt4cout.1728+64";
"STOREDANYTHING" -> "_ZSt4cout.1792+64";
"STOREDANYTHING" -> "_ZSt4cout.1856+16";
"STOREDANYTHING" -> "_ZSt4cout.1920+64";
"STOREDANYTHING" -> "_ZSt4cout.1984+64";
"STOREDANYTHING" -> "_ZSt4cout.2048+64";
"STOREDANYTHING" -> "_ZSt4cout.2112+64";
"STOREDANYTHING" -> "_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"STOREDANYTHING" -> "b_15";
"STOREDANYTHING" -> "i_27";
"_9" -> "ESCAPED";
"_9" -> "_ZSt3cin.0+64";
"_9" -> "_ZSt3cin.64+64";
"_9" -> "_ZSt3cin.128+64";
"_9" -> "_ZSt3cin.192+224";
"_9" -> "_ZSt3cin.448+64";
"_9" -> "_ZSt3cin.512+64";
"_9" -> "_ZSt3cin.576+1120";
"_9" -> "_ZSt3cin.1728+64";
"_9" -> "_ZSt3cin.1792+64";
"_9" -> "_ZSt3cin.1856+64";
"_9" -> "_ZSt3cin.1920+16";
"_9" -> "_ZSt3cin.1984+64";
"_9" -> "_ZSt3cin.2048+64";
"_9" -> "_ZSt3cin.2112+64";
"_9" -> "_ZSt3cin.2176+64";
"_9" -> "_ZSt4cout.0+64";
"_9" -> "_ZSt4cout.64+64";
"_9" -> "_ZSt4cout.128+224";
"_9" -> "_ZSt4cout.384+64";
"_9" -> "_ZSt4cout.448+64";
"_9" -> "_ZSt4cout.512+1120";
"_9" -> "_ZSt4cout.1664+64";
"_9" -> "_ZSt4cout.1728+64";
"_9" -> "_ZSt4cout.1792+64";
"_9" -> "_ZSt4cout.1856+16";
"_9" -> "_ZSt4cout.1920+64";
"_9" -> "_ZSt4cout.1984+64";
"_9" -> "_ZSt4cout.2048+64";
"_9" -> "_ZSt4cout.2112+64";
"b_26" -> "a_25";
"b_15" -> "ESCAPED";
"b_15" -> "b_26";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = _9\l"];
"STOREDANYTHING";
"INTEGER";
"_ZSt3cin.0+64";
"_ZSt3cin.64+64";
"_ZSt3cin.128+64";
"_ZSt3cin.192+224";
"_ZSt3cin.448+64";
"_ZSt3cin.512+64";
"_ZSt3cin.576+1120";
"_ZSt3cin.1728+64";
"_ZSt3cin.1792+64";
"_ZSt3cin.1856+64";
"_ZSt3cin.1920+16";
"_ZSt3cin.1984+64";
"_ZSt3cin.2048+64";
"_ZSt3cin.2112+64";
"_ZSt3cin.2176+64";
"_ZSt4cout.0+64";
"_ZSt4cout.64+64";
"_ZSt4cout.128+224";
"_ZSt4cout.384+64";
"_ZSt4cout.448+64";
"_ZSt4cout.512+1120";
"_ZSt4cout.1664+64";
"_ZSt4cout.1728+64";
"_ZSt4cout.1792+64";
"_ZSt4cout.1856+16";
"_ZSt4cout.1920+64";
"_ZSt4cout.1984+64";
"_ZSt4cout.2048+64";
"_ZSt4cout.2112+64";
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"_ZNSirsERi";
"_ZNSolsEi";
"_9";
"_ZNSolsEPFRSoS_E";
"n.0_24";
"a_25" [label="\N\nb_15 = a_25 + UNKNOWN\l"];
"b_26" [label="\N\nb_15 = b_26 + UNKNOWN\l"];
"b_15";
"i_27" [label="\N\ni_27 = i_27 + UNKNOWN\l"];
"main";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "_ZSt3cin.0+64";
"STOREDANYTHING" -> "_ZSt3cin.64+64";
"STOREDANYTHING" -> "_ZSt3cin.128+64";
"STOREDANYTHING" -> "_ZSt3cin.192+224";
"STOREDANYTHING" -> "_ZSt3cin.448+64";
"STOREDANYTHING" -> "_ZSt3cin.512+64";
"STOREDANYTHING" -> "_ZSt3cin.576+1120";
"STOREDANYTHING" -> "_ZSt3cin.1728+64";
"STOREDANYTHING" -> "_ZSt3cin.1792+64";
"STOREDANYTHING" -> "_ZSt3cin.1856+64";
"STOREDANYTHING" -> "_ZSt3cin.1920+16";
"STOREDANYTHING" -> "_ZSt3cin.1984+64";
"STOREDANYTHING" -> "_ZSt3cin.2048+64";
"STOREDANYTHING" -> "_ZSt3cin.2112+64";
"STOREDANYTHING" -> "_ZSt3cin.2176+64";
"STOREDANYTHING" -> "n.0_24";
"STOREDANYTHING" -> "_ZSt4cout.0+64";
"STOREDANYTHING" -> "_ZSt4cout.64+64";
"STOREDANYTHING" -> "_ZSt4cout.128+224";
"STOREDANYTHING" -> "_ZSt4cout.384+64";
"STOREDANYTHING" -> "_ZSt4cout.448+64";
"STOREDANYTHING" -> "_ZSt4cout.512+1120";
"STOREDANYTHING" -> "_ZSt4cout.1664+64";
"STOREDANYTHING" -> "_ZSt4cout.1728+64";
"STOREDANYTHING" -> "_ZSt4cout.1792+64";
"STOREDANYTHING" -> "_ZSt4cout.1856+16";
"STOREDANYTHING" -> "_ZSt4cout.1920+64";
"STOREDANYTHING" -> "_ZSt4cout.1984+64";
"STOREDANYTHING" -> "_ZSt4cout.2048+64";
"STOREDANYTHING" -> "_ZSt4cout.2112+64";
"STOREDANYTHING" -> "_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"STOREDANYTHING" -> "b_15";
"STOREDANYTHING" -> "i_27";
"_ZSt3cin.0+64" -> "ESCAPED";
"_ZSt3cin.64+64" -> "ESCAPED";
"_ZSt3cin.128+64" -> "ESCAPED";
"_ZSt3cin.192+224" -> "ESCAPED";
"_ZSt3cin.448+64" -> "ESCAPED";
"_ZSt3cin.512+64" -> "ESCAPED";
"_ZSt3cin.576+1120" -> "ESCAPED";
"_ZSt3cin.1728+64" -> "ESCAPED";
"_ZSt3cin.1792+64" -> "ESCAPED";
"_ZSt3cin.1856+64" -> "ESCAPED";
"_ZSt3cin.1920+16" -> "ESCAPED";
"_ZSt3cin.1984+64" -> "ESCAPED";
"_ZSt3cin.2048+64" -> "ESCAPED";
"_ZSt3cin.2112+64" -> "ESCAPED";
"_ZSt3cin.2176+64" -> "ESCAPED";
"_ZSt4cout.0+64" -> "ESCAPED";
"_ZSt4cout.64+64" -> "ESCAPED";
"_ZSt4cout.128+224" -> "ESCAPED";
"_ZSt4cout.384+64" -> "ESCAPED";
"_ZSt4cout.448+64" -> "ESCAPED";
"_ZSt4cout.512+1120" -> "ESCAPED";
"_ZSt4cout.1664+64" -> "ESCAPED";
"_ZSt4cout.1728+64" -> "ESCAPED";
"_ZSt4cout.1792+64" -> "ESCAPED";
"_ZSt4cout.1856+16" -> "ESCAPED";
"_ZSt4cout.1920+64" -> "ESCAPED";
"_ZSt4cout.1984+64" -> "ESCAPED";
"_ZSt4cout.2048+64" -> "ESCAPED";
"_ZSt4cout.2112+64" -> "ESCAPED";
"_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_" -> "ESCAPED";
"_9" -> "ESCAPED";
"_9" -> "_ZSt3cin.0+64";
"_9" -> "_ZSt3cin.64+64";
"_9" -> "_ZSt3cin.128+64";
"_9" -> "_ZSt3cin.192+224";
"_9" -> "_ZSt3cin.448+64";
"_9" -> "_ZSt3cin.512+64";
"_9" -> "_ZSt3cin.576+1120";
"_9" -> "_ZSt3cin.1728+64";
"_9" -> "_ZSt3cin.1792+64";
"_9" -> "_ZSt3cin.1856+64";
"_9" -> "_ZSt3cin.1920+16";
"_9" -> "_ZSt3cin.1984+64";
"_9" -> "_ZSt3cin.2048+64";
"_9" -> "_ZSt3cin.2112+64";
"_9" -> "_ZSt3cin.2176+64";
"_9" -> "_ZSt4cout.0+64";
"_9" -> "_ZSt4cout.64+64";
"_9" -> "_ZSt4cout.128+224";
"_9" -> "_ZSt4cout.384+64";
"_9" -> "_ZSt4cout.448+64";
"_9" -> "_ZSt4cout.512+1120";
"_9" -> "_ZSt4cout.1664+64";
"_9" -> "_ZSt4cout.1728+64";
"_9" -> "_ZSt4cout.1792+64";
"_9" -> "_ZSt4cout.1856+16";
"_9" -> "_ZSt4cout.1920+64";
"_9" -> "_ZSt4cout.1984+64";
"_9" -> "_ZSt4cout.2048+64";
"_9" -> "_ZSt4cout.2112+64";
"_9" -> "_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_";
"_9" -> "n.0_24";
"n.0_24" -> "ESCAPED";
"b_26" -> "a_25";
"b_15" -> "ESCAPED";
"b_15" -> "b_26";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL _ZSt3cin.0+64 _ZSt3cin.64+64 _ZSt3cin.128+64 _ZSt3cin.192+224 _ZSt3cin.448+64 _ZSt3cin.512+64 _ZSt3cin.576+1120 _ZSt3cin.1728+64 _ZSt3cin.1792+64 _ZSt3cin.1856+64 _ZSt3cin.1920+16 _ZSt3cin.1984+64 _ZSt3cin.2048+64 _ZSt3cin.2112+64 _ZSt3cin.2176+64 n _ZSt4cout.0+64 _ZSt4cout.64+64 _ZSt4cout.128+224 _ZSt4cout.384+64 _ZSt4cout.448+64 _ZSt4cout.512+1120 _ZSt4cout.1664+64 _ZSt4cout.1728+64 _ZSt4cout.1792+64 _ZSt4cout.1856+16 _ZSt4cout.1920+64 _ZSt4cout.1984+64 _ZSt4cout.2048+64 _ZSt4cout.2112+64 _ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ }
NONLOCAL = { ESCAPED NONLOCAL } same as _9
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_ZSt3cin.0+64 = { ESCAPED NONLOCAL }
_ZSt3cin.64+64 = { ESCAPED NONLOCAL }
_ZSt3cin.128+64 = { ESCAPED NONLOCAL }
_ZSt3cin.192+224 = { ESCAPED NONLOCAL }
_ZSt3cin.448+64 = { ESCAPED NONLOCAL }
_ZSt3cin.512+64 = { ESCAPED NONLOCAL }
_ZSt3cin.576+1120 = { ESCAPED NONLOCAL }
_ZSt3cin.1728+64 = { ESCAPED NONLOCAL }
_ZSt3cin.1792+64 = { ESCAPED NONLOCAL }
_ZSt3cin.1856+64 = { ESCAPED NONLOCAL }
_ZSt3cin.1920+16 = { ESCAPED NONLOCAL }
_ZSt3cin.1984+64 = { ESCAPED NONLOCAL }
_ZSt3cin.2048+64 = { ESCAPED NONLOCAL }
_ZSt3cin.2112+64 = { ESCAPED NONLOCAL }
_ZSt3cin.2176+64 = { ESCAPED NONLOCAL }
n = { ESCAPED NONLOCAL } same as n.0_24
_ZSt4cout.0+64 = { ESCAPED NONLOCAL }
_ZSt4cout.64+64 = { ESCAPED NONLOCAL }
_ZSt4cout.128+224 = { ESCAPED NONLOCAL }
_ZSt4cout.384+64 = { ESCAPED NONLOCAL }
_ZSt4cout.448+64 = { ESCAPED NONLOCAL }
_ZSt4cout.512+1120 = { ESCAPED NONLOCAL }
_ZSt4cout.1664+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1728+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1792+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1856+16 = { ESCAPED NONLOCAL }
_ZSt4cout.1920+64 = { ESCAPED NONLOCAL }
_ZSt4cout.1984+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2048+64 = { ESCAPED NONLOCAL }
_ZSt4cout.2112+64 = { ESCAPED NONLOCAL }
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_ = { ESCAPED NONLOCAL }
_ZNSirsERi = { }
_ZNSolsEi = { }
_9 = { ESCAPED NONLOCAL }
_ZNSolsEPFRSoS_E = { }
_12 = { ESCAPED NONLOCAL } same as _9
n.0_24 = { ESCAPED NONLOCAL }
a_25 = { NULL NONLOCAL }
b_26 = { NULL NONLOCAL }
b_15 = { NULL NONLOCAL }
i_27 = { NONLOCAL }
i_19 = { NONLOCAL } same as i_27
_17 = { ESCAPED NONLOCAL } same as _9
n.0_1 = { ESCAPED NONLOCAL } same as n.0_24
main = { }


Alias information for int main()

Aliased symbols

n, UID D.44912, int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { D.44897 D.44898 D.44912 } (nonlocal, escaped, interposable)

Flow-insensitive points-to information

_9, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_12, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
_17, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 5 3 6 4
;;
;; Loop 1
;;  header 3, latch 6
;;  depth 1, outer 0
;;  nodes: 3 6
;; 2 succs { 5 4 }
;; 5 succs { 3 }
;; 3 succs { 6 4 }
;; 6 succs { 3 }
;; 4 succs { 1 }
find_duplicates: <bb 7> duplicate of <bb 8>
Removing basic block 8

Symbols to be put in SSA form
{ D.49859 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 9
Number of blocks to update: 7 ( 78%)


int main ()
{
  int n;
  int i;
  int b;
  int a;
  int n.0_1;
  struct basic_ostream & _9;
  struct basic_ostream & _12;
  struct basic_ostream & _17;
  int n.0_24;

  <bb 2> [local count: 118111600]:
  std::basic_istream<char>::operator>> (&cin, &n);
  _9 = std::basic_ostream<char>::operator<< (&cout, 0);
  std::basic_ostream<char>::operator<< (_9, endl);
  _12 = std::basic_ostream<char>::operator<< (&cout, 1);
  std::basic_ostream<char>::operator<< (_12, endl);
  n.0_24 = n;
  if (n.0_24 > 1)
    goto <bb 5>; [89.00%]
  else
    goto <bb 7>; [11.00%]

  <bb 5> [local count: 105119324]:

  <bb 3> [local count: 955630225]:
  # a_25 = PHI <b_26(6), 0(5)>
  # b_26 = PHI <b_15(6), 1(5)>
  # i_27 = PHI <i_19(6), 1(5)>
  b_15 = a_25 + b_26;
  _17 = std::basic_ostream<char>::operator<< (&cout, b_15);
  std::basic_ostream<char>::operator<< (_17, endl);
  i_19 = i_27 + 1;
  n.0_1 = n;
  if (n.0_1 > i_19)
    goto <bb 6>; [89.00%]
  else
    goto <bb 7>; [11.00%]

  <bb 6> [local count: 850510901]:
  goto <bb 3>; [100.00%]

  <bb 7> [local count: 118111600]:

  <bb 4> [local count: 118111600]:
  n ={v} {CLOBBER};
  return 0;

}



;; Function _GLOBAL__sub_I_main (_GLOBAL__sub_I_main, funcdef_no=2279, decl_uid=49812, cgraph_uid=1013, symbol_order=1188) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED";
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"_Z41__static_initialization_and_destruction_0ii.constprop.0";
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*_Z41__static_initialization_and_destruction_0ii.constprop.0";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_Z41__static_initialization_and_destruction_0ii.constprop.0";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"_Z41__static_initialization_and_destruction_0ii.constprop.0";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
_Z41__static_initialization_and_destruction_0ii.constprop.0 = { }


Alias information for (static initializers for fib.cpp)

Aliased symbols


Call clobber information

ESCAPED, points-to vars: { }

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
void _GLOBAL__sub_I_main ()
{
  <bb 2> [local count: 1073741824]:
  __static_initialization_and_destruction_0.constprop ();
  return;

}


